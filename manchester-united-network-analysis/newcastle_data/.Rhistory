devtools::install_github("kimpham23/spotiverseR")
library(devtools)
install.packages
install.packages("devtools")
library(devtools)
devtools::install_github
devtools::install_github("kimpham23/spotiverseR")
library(devtools)
devtools::install_github("josiahparry/geniusR")
library(geniusR)
## Loading necessary packages
library(igraph)
library(dplyr)
## Setting working directory, importing data files
setwd("/Users/swkim728/Desktop/wesleyan/fall_2018/qac241/final_project/newcastle_data")
first_half = read.csv("first_half_data.csv", header = T) %>% filter(!to %in% c(0,98,99))
second_half = read.csv("second_half_data.csv", header = T) %>% filter(!to %in% c(0,98,99))
## _FIRST HALF_
## Creating adjacency matrix for first half
adj_matrix1 = first_half %>%
graph_from_data_frame(directed = T) %>%
get.adjacency() %>%
as.matrix()
## Subsetting the top 10 passes
for (i in 1:nrow(adj_matrix1)) {
for (j in 1:ncol(adj_matrix1)) {
max_value = max(adj_matrix1[i,])
min_value = sort(adj_matrix1, decreasing = T)[10]
if (adj_matrix1[i,j] < min_value) {
adj_matrix1[i,j] = 0
}
}
}
## Creating subsetted graph from matrix and exporting to cytoscape
vg1 = graph_from_adjacency_matrix(adj_matrix1, mode = "directed", weighted = T)
write.graph(graph=vg1, file="firsthalf.graphml", format="graphml")
## Creating an undirected total graph from matrix and exporting to cytoscape
adj_matrix1a = first_half %>%
graph_from_data_frame(directed = F) %>%
get.adjacency() %>%
as.matrix()
g1a = graph_from_adjacency_matrix(adj_matrix1a, mode = "undirected", weighted = T)
##write.graph(graph=g1A, file="firsthalfA.graphml", format="graphml")
## _SECOND HALF_ ##
## For second half
## Creating subsetted directed graph
adj_matrix2 = second_half %>%
graph_from_data_frame(directed = T) %>%
get.adjacency() %>%
as.matrix()
adj_matrix2["10",] = adj_matrix2["10",] + adj_matrix2["7",]
adj_matrix2[,"10"] = adj_matrix2[,"10"] + adj_matrix2[,"7"]
adj_matrix2 = adj_matrix2[-12,-12]
for (i in 1:nrow(adj_matrix2)) {
for (j in 1:ncol(adj_matrix2)) {
max_value = max(adj_matrix2[i,])
min_value = sort(adj_matrix2, decreasing = T)[10]
if (adj_matrix2[i,j] < min_value) {
adj_matrix2[i,j] = 0
}
}
}
vg2 = graph_from_adjacency_matrix(adj_matrix2, mode = "directed", weighted = T)
##write.graph(graph=vg2, file="secondhalfcombined.graphml", format="graphml")
## Creating undirected total graph
adj_matrix2a = second_half %>%
graph_from_data_frame(directed = F) %>%
get.adjacency() %>%
as.matrix()
adj_matrix2a["10",] = adj_matrix2a["10",] + adj_matrix2a["7",]
adj_matrix2a[,"10"] = adj_matrix2a[,"10"] + adj_matrix2a[,"7"]
adj_matrix2a = adj_matrix2a[-12,-12]
g2a = graph_from_adjacency_matrix(adj_matrix2a, mode = "undirected", weighted = T)
##write.graph(graph=g2a, file="secondhalfcombineda.graphml", format="graphml")
## Calculating eigenvector centrality
firsthalf_eigen = eigen_centrality(g1a, directed = F)
sort(firsthalf_eigen$vector, decreasing = T)
secondhalf_eigen = eigen_centrality(g2a, directed = F)
sort(secondhalf_eigen$vector, decreasing = T)
