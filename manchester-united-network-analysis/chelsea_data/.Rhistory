## Loading necessary packages
library(igraph)
library(dplyr)
## Setting working directory, importing data files
setwd("/Users/swkim728/Desktop/wesleyan/fall_2018/qac241/final_project/newcastle_data")
first_half_data = read.csv("first_half_data.csv", header = T, stringsAsFactors = F)
second_half_data = read.csv("second_half_data.csv", header = T, stringsAsFactors = F)
##keeping only pass data
first_half = first_half_data %>% filter(!to %in% c(0,98,99))
second_half = second_half_data %>% filter(!to %in% c(0,98,99))
##-----
first_half = read.csv("first_half_data.csv", header = T) %>% filter(!to %in% c(0,98,99))
second_half = read.csv("second_half_data.csv", header = T) %>% filter(!to %in% c(0,98,99))
kickoff = read.csv("mn_ko.csv", header = T) %>% filter(!to %in% c(0,98,99))
View(first_half)
## Loading necessary packages
library(igraph)
library(dplyr)
## Setting working directory, importing data files
setwd("/Users/swkim728/Desktop/wesleyan/fall_2018/qac241/final_project/newcastle_data")
##-----
first_half = read.csv("first_half_data.csv", header = T) %>% filter(!to %in% c(0,98,99))
second_half = read.csv("second_half_data.csv", header = T) %>% filter(!to %in% c(0,98,99))
##creating adjacency matrix
adj_matrix1 = first_half %>%
graph_from_data_frame(directed = T) %>%
get.adjacency() %>%
as.matrix()
g1 = graph_from_adjacency_matrix(adj_matrix1, mode = "directed", weighted = T)
for (i in 1:nrow(adj_matrix1)) {
for (j in 1:ncol(adj_matrix1)) {
max_value = max(adj_matrix1[i,])
min_value = sort(adj_matrix1, decreasing = T)[10]
if (adj_matrix1[i,j] < min_value) {
adj_matrix1[i,j] = 0
}
}
}
vg1 = graph_from_adjacency_matrix(adj_matrix1, mode = "directed", weighted = T)
##for second half
adj_matrix2 = second_half %>%
graph_from_data_frame(directed = T) %>%
get.adjacency() %>%
as.matrix()
adj_matrix2["10",] = adj_matrix2["10",] + adj_matrix2["7",]
adj_matrix2[,"10"] = adj_matrix2[,"10"] + adj_matrix2[,"7"]
adj_matrix2 = adj_matrix2[-12,-12]
g2 = graph_from_adjacency_matrix(adj_matrix2, mode = "directed", weighted = T)
for (i in 1:nrow(adj_matrix2)) {
for (j in 1:ncol(adj_matrix2)) {
max_value = max(adj_matrix2[i,])
min_value = sort(adj_matrix2, decreasing = T)[10]
if (adj_matrix2[i,j] < min_value) {
adj_matrix2[i,j] = 0
}
}
}
vg2 = graph_from_adjacency_matrix(adj_matrix2, mode = "directed", weighted = T)
firsthalf_eigen = eigen_centrality(g1, directed = T)
sort(firsthalf_eigen$vector, decreasing = T)
secondhalf_eigen = eigen_centrality(g2, directed = T)
sort(secondhalf_eigen$vector, decreasing = T)
plot(g1, node.size=secondhalf_eigen)
plot(g1, vertex.size=secondhalf_eigen)
plot(g1, vertex.size=secondhalf_eigen$vector)
plot(g2, vertex.size=secondhalf_eigen$vector)
plot(g2, vertex.size=secondhalf_eigen$vector)
str(secondhalf_eigen$vector)
plot(g2, vertex.size=secondhalf_eigen$vector*10)
plot(g2, vertex.size=secondhalf_eigen$vector*20)
plot(g2, vertex.size=firsthalf_eigen$vector*20)
plot(g2, vertex.size=secondhalf_eigen$vector*50)
sort(secondhalf_eigen$vector, decreasing = T)
##-----
first_half = read.csv("first_half_data.csv", header = T) %>% filter(!to %in% c(0,98,99))
##-----
first_half = read.csv("first_half_data.csv", header = T) ##%>% filter(!to %in% c(0,98,99))
View(first_half)
first_half[1,2]
first_half_shot = read.csv("first_half_data_shot.csv", header = T)
second_half_shot = read.csv("second_half_data_shot.csv", header = T)
View(first_half_shot)
first_half_shot = read.csv("first_half_data_shot.csv", header = T)
second_half_shot = read.csv("second_half_data_shot.csv", header = T)
second_half_shot = read.csv("second_half_data_shot.csv", header = T) %>% filter(!to %in% c(0,98,99))
adj_matrix1 = first_half_shot %>%
graph_from_data_frame(directed = T) %>%
get.adjacency() %>%
as.matrix()
g1 = graph_from_adjacency_matrix(adj_matrix1, mode = "directed", weighted = T)
firsthalf_eigen = eigen_centrality(g1, directed = T)
sort(firsthalf_eigen$vector, decreasing = T)
first_half_shot = read.csv("first_half_data_shot.csv", header = T) %>% filter(!to %in% c(0,98,99))
second_half_shot = read.csv("second_half_data_shot.csv", header = T) %>% filter(!to %in% c(0,98,99))
adj_matrix1 = first_half_shot %>%
graph_from_data_frame(directed = T) %>%
get.adjacency() %>%
as.matrix()
g1 = graph_from_adjacency_matrix(adj_matrix1, mode = "directed", weighted = T)
firsthalf_eigen = eigen_centrality(g1, directed = T)
sort(firsthalf_eigen$vector, decreasing = T)
adj_matrix1 = second_half_shot %>%
graph_from_data_frame(directed = T) %>%
get.adjacency() %>%
as.matrix()
g1 = graph_from_adjacency_matrix(adj_matrix1, mode = "directed", weighted = T)
firsthalf_eigen = eigen_centrality(g1, directed = T)
sort(firsthalf_eigen$vector, decreasing = T)
buildup = first_half_shot %>% rbind(second_half_shot)
View(buildup)
count(buildup$from)
table(buildup$from)
setwd("/Users/swkim728/Desktop/wesleyan/fall_2018/qac241/final_project/chelsea_data")
second_half_shot_chelsea = read.csv("second_half_data_shot.csv", header = T) %>% filter(!to %in% c(0,98,99))
second_half_shot_chelsea = read.csv("second_half_shot.csv", header = T) %>% filter(!to %in% c(0,98,99))
table(buildsupc$from)
table(buildupc$from)
table(second_half_shot_chelsea$from)
buildup = first_half_shot %>% rbind(second_half_shot, second_half_shot_chelsea)
table(buildup)
table(buildup$from)
##kickoff = read.csv("mn_ko.csv", header = T) %>% filter(!to %in% c(0,98,99))
##sub_19 = read.csv("mn_mata.csv", header = T) %>% filter(!to %in% c(0,98,99))
##halftime = read.csv("mn_fellaini.csv", header=T) %>% filter(!to %in% c(0,98,99))
##sub_67 = read.csv("mn_alexis.csv", header = T) %>% filter(!to %in% c(0,98,99))
full_game = first_half %>% rbind(second_half)
## Setting working directory, importing data files
setwd("/Users/swkim728/Desktop/wesleyan/fall_2018/qac241/final_project/newcastle_data")
##-----
first_half = read.csv("first_half_data.csv", header = T) ##%>% filter(!to %in% c(0,98,99))
second_half = read.csv("second_half_data.csv", header = T) %>% filter(!to %in% c(0,98,99))
##kickoff = read.csv("mn_ko.csv", header = T) %>% filter(!to %in% c(0,98,99))
##sub_19 = read.csv("mn_mata.csv", header = T) %>% filter(!to %in% c(0,98,99))
##halftime = read.csv("mn_fellaini.csv", header=T) %>% filter(!to %in% c(0,98,99))
##sub_67 = read.csv("mn_alexis.csv", header = T) %>% filter(!to %in% c(0,98,99))
full_game = first_half %>% rbind(second_half)
table(full_game$from)
table(full_game$to)
##-----
first_half = read.csv("first_half_data.csv", header = T) %>% filter(!to %in% c(0,98,99))
second_half = read.csv("second_half_data.csv", header = T) %>% filter(!to %in% c(0,98,99))
##kickoff = read.csv("mn_ko.csv", header = T) %>% filter(!to %in% c(0,98,99))
##sub_19 = read.csv("mn_mata.csv", header = T) %>% filter(!to %in% c(0,98,99))
##halftime = read.csv("mn_fellaini.csv", header=T) %>% filter(!to %in% c(0,98,99))
##sub_67 = read.csv("mn_alexis.csv", header = T) %>% filter(!to %in% c(0,98,99))
full_game = first_half %>% rbind(second_half)
table(full_game$to)
table(full_game$from)
## Loading necessary packages
library(igraph)
library(dplyr)
## Setting working directory, importing data files
setwd("/Users/swkim728/Desktop/wesleyan/fall_2018/qac241/final_project/newcastle_data")
##-----
first_half = read.csv("first_half_data.csv", header = T) %>% filter(!to %in% c(0,98,99))
second_half = read.csv("second_half_data.csv", header = T) %>% filter(!to %in% c(0,98,99))
full_game = first_half %>% rbind(second_half)
##creating adjacency matrix
adj_matrix1 = first_half %>%
graph_from_data_frame(directed = T) %>%
get.adjacency() %>%
as.matrix()
g1 = graph_from_adjacency_matrix(adj_matrix1, mode = "directed", weighted = T)
for (i in 1:nrow(adj_matrix1)) {
for (j in 1:ncol(adj_matrix1)) {
max_value = max(adj_matrix1[i,])
min_value = sort(adj_matrix1, decreasing = T)[10]
if (adj_matrix1[i,j] < min_value) {
adj_matrix1[i,j] = 0
}
}
}
vg1 = graph_from_adjacency_matrix(adj_matrix1, mode = "directed", weighted = T)
##write.graph(graph=g, file="firsthalf.graphml", format="graphml")
##for second half
adj_matrix2 = second_half %>%
graph_from_data_frame(directed = T) %>%
get.adjacency() %>%
as.matrix()
adj_matrix2["10",] = adj_matrix2["10",] + adj_matrix2["7",]
adj_matrix2[,"10"] = adj_matrix2[,"10"] + adj_matrix2[,"7"]
adj_matrix2 = adj_matrix2[-12,-12]
g2 = graph_from_adjacency_matrix(adj_matrix2, mode = "directed", weighted = T)
for (i in 1:nrow(adj_matrix2)) {
for (j in 1:ncol(adj_matrix2)) {
max_value = max(adj_matrix2[i,])
min_value = sort(adj_matrix2, decreasing = T)[10]
if (adj_matrix2[i,j] < min_value) {
adj_matrix2[i,j] = 0
}
}
}
vg2 = graph_from_adjacency_matrix(adj_matrix2, mode = "directed", weighted = T)
##write.graph(graph=vg2, file="secondhalfcombined.graphml", format="graphml")
adj_matrixf = first_half %>%
graph_from_data_frame(directed = T) %>%
get.adjacency() %>%
as.matrix()
gf = graph_from_adjacency_matrix(adj_matrix1, mode = "directed", weighted = T)
# firsthalf_eigen = eigen_centrality(g1, directed = T)
# sort(firsthalf_eigen$vector, decreasing = T)
# secondhalf_eigen = eigen_centrality(g2, directed = T)
# sort(secondhalf_eigen$vector, decreasing = T)
adj_matrixf = first_half %>%
graph_from_data_frame(directed = T) %>%
get.adjacency() %>%
as.matrix()
gf = graph_from_adjacency_matrix(adj_matrixf, mode = "directed", weighted = T)
fullgame_eigen = eigen_centrality(gf, directed = T)
sort(fullgame_eigen$vector, decreasing = T)
adj_matrix1A = first_half %>%
graph_from_data_frame(directed = F) %>%
get.adjacency() %>%
as.matrix()
g1A = graph_from_adjacency_matrix(adj_matrix1A, mode = "undirected", weighted = T)
write.graph(graph=g1A, file="firsthalfA.graphml", format="graphml")
adj_matrix2a = second_half %>%
graph_from_data_frame(directed = F) %>%
get.adjacency() %>%
as.matrix()
adj_matrix2a["10",] = adj_matrix2["10",] + adj_matrix2["7",]
adj_matrix2a[,"10"] = adj_matrix2[,"10"] + adj_matrix2[,"7"]
adj_matrix2a = adj_matrix2a[-12,-12]
g2a = graph_from_adjacency_matrix(adj_matrix2a, mode = "undirected", weighted = T)
write.graph(graph=g2a, file="secondhalfcombineda.graphml", format="graphml")
## Loading necessary packages
library(igraph)
library(dplyr)
## Setting working directory, importing data files
setwd("/Users/swkim728/Desktop/wesleyan/fall_2018/qac241/final_project/chelsea_data")
##-----
first_half = read.csv("first_half_data.csv", header = T) %>% filter(!to %in% c(0,98,99))
second_half = read.csv("second_half_data.csv", header = T) %>% filter(!to %in% c(0,98,99))
adj_matrix1A = first_half %>%
graph_from_data_frame(directed = F) %>%
get.adjacency() %>%
as.matrix()
g1A = graph_from_adjacency_matrix(adj_matrix1A, mode = "undirected", weighted = T)
write.graph(graph=g1A, file="firsthalfA.graphml", format="graphml")
adj_matrix2a = second_half %>%
graph_from_data_frame(directed = F) %>%
get.adjacency() %>%
as.matrix()
adj_matrix2a[c("8","11","10"),] = adj_matrix2a[c("8","11","10"),] + adj_matrix2a[c("21","7","15"),]
adj_matrix2a[,c("8","11","10")] = adj_matrix2a[,c("8","11","10")] + adj_matrix2a[,c("21","7","15")]
adj_matrix2a = adj_matrix2a[-(12:14),-(12:14)]
g2a = graph_from_adjacency_matrix(adj_matrix2a, mode = "undirected", weighted = T)
write.graph(graph=g2a, file="secondhalfcombineda.graphml", format="graphml")
## Loading necessary packages
library(igraph)
library(dplyr)
## Setting working directory, importing data files
setwd("/Users/swkim728/Desktop/wesleyan/fall_2018/qac241/final_project/chelsea_data")
##-----
first_half = read.csv("first_half_data.csv", header = T) %>% filter(!to %in% c(0,98,99))
second_half = read.csv("second_half_data.csv", header = T) %>% filter(!to %in% c(0,98,99))
##creating adjacency matrix
adj_matrix1 = first_half %>%
graph_from_data_frame(directed = T) %>%
get.adjacency() %>%
as.matrix()
g1 = graph_from_adjacency_matrix(adj_matrix1, mode = "directed", weighted = T)
for (i in 1:nrow(adj_matrix1)) {
for (j in 1:ncol(adj_matrix1)) {
max_value = max(adj_matrix1[i,])
min_value = sort(adj_matrix1, decreasing = T)[10]
if (adj_matrix1[i,j] < min_value) {
adj_matrix1[i,j] = 0
}
}
}
vg1 = graph_from_adjacency_matrix(adj_matrix1, mode = "directed", weighted = T)
##write.graph(graph=vg1, file="firsthalf.graphml", format="graphml")
adj_matrix1A = first_half %>%
graph_from_data_frame(directed = F) %>%
get.adjacency() %>%
as.matrix()
g1A = graph_from_adjacency_matrix(adj_matrix1A, mode = "undirected", weighted = T)
##write.graph(graph=g1A, file="firsthalfA.graphml", format="graphml")
##for second half
adj_matrix2 = second_half %>%
graph_from_data_frame(directed = T) %>%
get.adjacency() %>%
as.matrix()
adj_matrix2[c("8","11","10"),] = adj_matrix2[c("8","11","10"),] + adj_matrix2[c("21","7","15"),]
adj_matrix2[,c("8","11","10")] = adj_matrix2[,c("8","11","10")] + adj_matrix2[,c("21","7","15")]
adj_matrix2 = adj_matrix2[-(12:14),-(12:14)]
g2 = graph_from_adjacency_matrix(adj_matrix2, mode = "directed", weighted = T)
for (i in 1:nrow(adj_matrix2)) {
for (j in 1:ncol(adj_matrix2)) {
max_value = max(adj_matrix2[i,])
min_value = sort(adj_matrix2, decreasing = T)[10]
if (adj_matrix2[i,j] < min_value) {
adj_matrix2[i,j] = 0
}
}
}
vg2 = graph_from_adjacency_matrix(adj_matrix2, mode = "directed", weighted = T)
##write.graph(graph=vg2, file="secondhalf.graphml", format="graphml")
adj_matrix2a = second_half %>%
graph_from_data_frame(directed = F) %>%
get.adjacency() %>%
as.matrix()
adj_matrix2a[c("8","11","10"),] = adj_matrix2a[c("8","11","10"),] + adj_matrix2a[c("21","7","15"),]
adj_matrix2a[,c("8","11","10")] = adj_matrix2a[,c("8","11","10")] + adj_matrix2a[,c("21","7","15")]
adj_matrix2a = adj_matrix2a[-(12:14),-(12:14)]
g2a = graph_from_adjacency_matrix(adj_matrix2a, mode = "undirected", weighted = T)
##write.graph(graph=g2a, file="secondhalfcombineda.graphml", format="graphml")
adj_matrixf = first_half %>%
graph_from_data_frame(directed = T) %>%
get.adjacency() %>%
as.matrix()
gf = graph_from_adjacency_matrix(adj_matrixf, mode = "directed", weighted = T)
firsthalf_eigen = eigen_centrality(g1, directed = T)
secondhalf_eigen = eigen_centrality(g2, directed = T)
firsthalf_eigen = eigen_centrality(g1, directed = T)
sort(firsthalf_eigen$vector, decreasing = T)
secondhalf_eigen = eigen_centrality(g2, directed = T)
sort(secondhalf_eigen$vector, decreasing = T)
firsthalf_btwn = betweenness(g1, directed = TRUE)
firsthalf_btwn
E(g1)$weight
sort(firsthalf_btwn, decreasing = T)
firsthalf_btwn = betweenness(g2, directed = TRUE)
sort(firsthalf_btwn, decreasing = T)
firsthalf_btwn = closeness(g1, directed = TRUE)
sort(firsthalf_btwn, decreasing = T)
firsthalf_eigen = eigen_centrality(g1a, directed = T)
sort(firsthalf_eigen$vector, decreasing = T)
secondhalf_eigen = eigen_centrality(g2a, directed = T)
sort(secondhalf_eigen$vector, decreasing = T)
firsthalf_eigen = eigen_centrality(g1a, directed = F)
sort(firsthalf_eigen$vector, decreasing = T)
secondhalf_eigen = eigen_centrality(g2a, directed = F)
sort(secondhalf_eigen$vector, decreasing = T)
## Loading necessary packages
library(igraph)
library(dplyr)
## Setting working directory, importing data files
setwd("/Users/swkim728/Desktop/wesleyan/fall_2018/qac241/final_project/newcastle_data")
##-----
first_half = read.csv("first_half_data.csv", header = T) %>% filter(!to %in% c(0,98,99))
second_half = read.csv("second_half_data.csv", header = T) %>% filter(!to %in% c(0,98,99))
full_game = first_half %>% rbind(second_half)
##creating adjacency matrix
adj_matrix1 = first_half %>%
graph_from_data_frame(directed = T) %>%
get.adjacency() %>%
as.matrix()
g1 = graph_from_adjacency_matrix(adj_matrix1, mode = "directed", weighted = T)
for (i in 1:nrow(adj_matrix1)) {
for (j in 1:ncol(adj_matrix1)) {
max_value = max(adj_matrix1[i,])
min_value = sort(adj_matrix1, decreasing = T)[10]
if (adj_matrix1[i,j] < min_value) {
adj_matrix1[i,j] = 0
}
}
}
vg1 = graph_from_adjacency_matrix(adj_matrix1, mode = "directed", weighted = T)
##write.graph(graph=g, file="firsthalf.graphml", format="graphml")
adj_matrix1A = first_half %>%
graph_from_data_frame(directed = F) %>%
get.adjacency() %>%
as.matrix()
g1A = graph_from_adjacency_matrix(adj_matrix1A, mode = "undirected", weighted = T)
##write.graph(graph=g1A, file="firsthalfA.graphml", format="graphml")
##for second half
adj_matrix2 = second_half %>%
graph_from_data_frame(directed = T) %>%
get.adjacency() %>%
as.matrix()
adj_matrix2["10",] = adj_matrix2["10",] + adj_matrix2["7",]
adj_matrix2[,"10"] = adj_matrix2[,"10"] + adj_matrix2[,"7"]
adj_matrix2 = adj_matrix2[-12,-12]
g2 = graph_from_adjacency_matrix(adj_matrix2, mode = "directed", weighted = T)
for (i in 1:nrow(adj_matrix2)) {
for (j in 1:ncol(adj_matrix2)) {
max_value = max(adj_matrix2[i,])
min_value = sort(adj_matrix2, decreasing = T)[10]
if (adj_matrix2[i,j] < min_value) {
adj_matrix2[i,j] = 0
}
}
}
vg2 = graph_from_adjacency_matrix(adj_matrix2, mode = "directed", weighted = T)
##write.graph(graph=vg2, file="secondhalfcombined.graphml", format="graphml")
adj_matrix2a = second_half %>%
graph_from_data_frame(directed = F) %>%
get.adjacency() %>%
as.matrix()
adj_matrix2a["10",] = adj_matrix2["10",] + adj_matrix2["7",]
adj_matrix2a[,"10"] = adj_matrix2[,"10"] + adj_matrix2[,"7"]
adj_matrix2a = adj_matrix2a[-12,-12]
g2a = graph_from_adjacency_matrix(adj_matrix2a, mode = "undirected", weighted = T)
##write.graph(graph=g2a, file="secondhalfcombineda.graphml", format="graphml")
adj_matrixf = first_half %>%
graph_from_data_frame(directed = T) %>%
get.adjacency() %>%
as.matrix()
gf = graph_from_adjacency_matrix(adj_matrixf, mode = "directed", weighted = T)
firsthalf_eigen = eigen_centrality(g1, directed = T)
sort(firsthalf_eigen$vector, decreasing = T)
secondhalf_eigen = eigen_centrality(g2, directed = T)
sort(secondhalf_eigen$vector, decreasing = T)
fullgame_eigen = eigen_centrality(gf, directed = T)
sort(fullgame_eigen$vector, decreasing = T)
## Loading necessary packages
library(igraph)
library(dplyr)
## Setting working directory, importing data files
setwd("/Users/swkim728/Desktop/wesleyan/fall_2018/qac241/final_project/chelsea_data")
##-----
first_half = read.csv("first_half_data.csv", header = T) %>% filter(!to %in% c(0,98,99))
second_half = read.csv("second_half_data.csv", header = T) %>% filter(!to %in% c(0,98,99))
##creating adjacency matrix
adj_matrix1 = first_half %>%
graph_from_data_frame(directed = T) %>%
get.adjacency() %>%
as.matrix()
g1 = graph_from_adjacency_matrix(adj_matrix1, mode = "directed", weighted = T)
for (i in 1:nrow(adj_matrix1)) {
for (j in 1:ncol(adj_matrix1)) {
max_value = max(adj_matrix1[i,])
min_value = sort(adj_matrix1, decreasing = T)[10]
if (adj_matrix1[i,j] < min_value) {
adj_matrix1[i,j] = 0
}
}
}
vg1 = graph_from_adjacency_matrix(adj_matrix1, mode = "directed", weighted = T)
##write.graph(graph=vg1, file="firsthalf.graphml", format="graphml")
adj_matrix1A = first_half %>%
graph_from_data_frame(directed = F) %>%
get.adjacency() %>%
as.matrix()
g1A = graph_from_adjacency_matrix(adj_matrix1A, mode = "undirected", weighted = T)
##write.graph(graph=g1A, file="firsthalfA.graphml", format="graphml")
##for second half
adj_matrix2 = second_half %>%
graph_from_data_frame(directed = T) %>%
get.adjacency() %>%
as.matrix()
adj_matrix2[c("8","11","10"),] = adj_matrix2[c("8","11","10"),] + adj_matrix2[c("21","7","15"),]
adj_matrix2[,c("8","11","10")] = adj_matrix2[,c("8","11","10")] + adj_matrix2[,c("21","7","15")]
adj_matrix2 = adj_matrix2[-(12:14),-(12:14)]
g2 = graph_from_adjacency_matrix(adj_matrix2, mode = "directed", weighted = T)
for (i in 1:nrow(adj_matrix2)) {
for (j in 1:ncol(adj_matrix2)) {
max_value = max(adj_matrix2[i,])
min_value = sort(adj_matrix2, decreasing = T)[10]
if (adj_matrix2[i,j] < min_value) {
adj_matrix2[i,j] = 0
}
}
}
vg2 = graph_from_adjacency_matrix(adj_matrix2, mode = "directed", weighted = T)
##write.graph(graph=vg2, file="secondhalf.graphml", format="graphml")
adj_matrix2a = second_half %>%
graph_from_data_frame(directed = F) %>%
get.adjacency() %>%
as.matrix()
adj_matrix2a[c("8","11","10"),] = adj_matrix2a[c("8","11","10"),] + adj_matrix2a[c("21","7","15"),]
adj_matrix2a[,c("8","11","10")] = adj_matrix2a[,c("8","11","10")] + adj_matrix2a[,c("21","7","15")]
adj_matrix2a = adj_matrix2a[-(12:14),-(12:14)]
g2a = graph_from_adjacency_matrix(adj_matrix2a, mode = "undirected", weighted = T)
##write.graph(graph=g2a, file="secondhalfcombineda.graphml", format="graphml")
adj_matrixf = first_half %>%
graph_from_data_frame(directed = T) %>%
get.adjacency() %>%
as.matrix()
gf = graph_from_adjacency_matrix(adj_matrixf, mode = "directed", weighted = T)
firsthalf_eigen = eigen_centrality(g1a, directed = T)
secondhalf_eigen = eigen_centrality(g2a, directed = T)
firsthalf_eigen = eigen_centrality(g1a, directed = F)
sort(firsthalf_eigen$vector, decreasing = T)
secondhalf_eigen = eigen_centrality(g2a, directed = F)
sort(secondhalf_eigen$vector, decreasing = T)
firsthalf_btwn = closeness(g1, directed = TRUE)
sort(firsthalf_btwn, decreasing = T)
table(first_half$from)
table(first_half$to)
